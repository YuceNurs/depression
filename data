import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras.models import Sequential
from scikeras.wrappers import KerasClassifier, KerasRegressor
from tensorflow.keras.layers import Dense, Dropout, BatchNormalization , Embedding, Flatten
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelEncoder,StandardScaler
from sklearn.model_selection import train_test_split ,cross_val_score
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import ConfusionMatrixDisplay, confusion_matrix,classification_report, accuracy_score
import keras_tuner
import keras

df = pd.read_csv('C:\\Users\\yucen\\Downloads\\student_depression_dataset.csv')
df_head = df.head()
df_description= df.describe()
df.shape, df.columns, df_head, df_description, df.info()


print(tf.__version__)
import datetime
print(f"Notebook last run (end-to-end): {datetime.datetime.now()}")
print(df.isnull().sum()) #veride null var mı kontrolü 

print((df == '?').sum())
print(df[df.apply(lambda x: x.astype(str).str.contains('\\?')).any(axis=1)]) #kodda ? hatası alıyorum veri setini kontrol ettim.

from sklearn.preprocessing import LabelEncoder #string ifadeleri float ya da integer olarak tekrar kazandıralım
#categorical_columns = ['Gender', 'Family History of Mental Illness','Have you ever had suicidal thoughts ?']

#for col in categorical_columns:
#     df[col + '_encoded'] = encoder.fit_transform(df[col])
    
encoder = LabelEncoder()
df['Gender'] = encoder.fit_transform(df['Gender'])
df['Family History of Mental Illness'] = encoder.fit_transform(df['Family History of Mental Illness'])
df['Have you ever had suicidal thoughts ?'] = encoder.fit_transform(df['Have you ever had suicidal thoughts ?'])
print (df)

df = df[df['Financial Stress'] != '?']
encoder = LabelEncoder()
df['City'] = encoder.fit_transform(df['City'])
df['Profession'] = encoder.fit_transform(df['Profession'])
df['Degree'] = encoder.fit_transform(df['Degree'])
df['Dietary Habits'] = encoder.fit_transform(df['Dietary Habits'])
df['Sleep Duration'] = encoder.fit_transform(df['Sleep Duration'])
model = Sequential()
model.add(Embedding(input_dim=len(df['City'].unique()), output_dim=5))
model.add(Embedding(input_dim=len(df['Profession'].unique()), output_dim=5))
model.add(Embedding(input_dim=len(df['Degree'].unique()), output_dim=5))
model.add(Embedding(input_dim=len(df['Dietary Habits'].unique()), output_dim=5))
model.add(Embedding(input_dim=len(df['Sleep Duration'].unique()), output_dim=5))


###########################################################3
X = df.drop('Depression', axis=1)
y = df['Depression']

trainX, testX, trainY, testY = train_test_split(X, y, test_size = 0.2, random_state=42)

sc=StandardScaler()

scaler = sc.fit(trainX)
trainX_scaled = scaler.transform(trainX)
testX_scaled = scaler.transform(testX)

mlp_clf = MLPClassifier(hidden_layer_sizes=(64,32),
                        activation = 'relu',
                        solver = 'adam',
                        learning_rate='adaptive',
                        max_iter=500
                       )

mlp_clf.fit(trainX, trainY)
y_pred = mlp_clf.predict(testX)
print('Test Doğruluk (Accuracy): {:.2f}'.format(accuracy_score(testY, y_pred)))

cm = confusion_matrix(testY, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()
######################################################33
mlp = MLPClassifier(
    hidden_layer_sizes=(256, 128),  # 2 hidden layer
    activation='relu',
    solver='adam',
    learning_rate_init=0.001,
    alpha=0.0001,  # L2 regularization
    batch_size=256,
    early_stopping=True,
    validation_fraction=0.1,
    max_iter=500,
    random_state=42
) 
mlp_clf.fit(trainX, trainY)
y_pred = mlp_clf.predict(testX)
print('Test Doğruluk (Accuracy): {:.2f}'.format(accuracy_score(testY, y_pred)))
accuracy değeri çok oynak bu yüzden şöyle bir şey deneyeceğim
##############################################################
mlp = MLPClassifier(
    hidden_layer_sizes=(64,),  # 2 hidden layer
    activation='relu',
    solver='adam',
    learning_rate_init=0.001,
    alpha=0.0001,  # L2 regularization
    batch_size=256,
    early_stopping=True,
    validation_fraction=0.1,
    max_iter=500,
    random_state=42
) 
mlp_clf.fit(trainX, trainY)
y_pred = mlp_clf.predict(testX)
print('Test Doğruluk (Accuracy): {:.2f}'.format(accuracy_score(testY, y_pred)))
veriyi sabitledim ve artık başarı 0.76 oh be
############################################################
mlp = MLPClassifier(
    hidden_layer_sizes=(64,),  # 2 hidden layer
    activation='relu',
    solver='adam',
    learning_rate_init=0.001,
    alpha=0.0001,  # L2 regularization
    batch_size=256,
    early_stopping=True,
    validation_fraction=0.1,
    max_iter=500,
    random_state=42
) 
mlp_clf.fit(trainX, trainY)
y_pred = mlp_clf.predict(testX)
print('Test Doğruluk (Accuracy): {:.2f}'.format(accuracy_score(testY, y_pred)))
cm = confusion_matrix(testY, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()

# Confusion matrix değerleri
tn, fp = 1834, 474
fn, tp = 397, 2875

# y_true ve y_pred üret
y_true = np.array([0]*tn + [0]*fp + [1]*fn + [1]*tp)
y_pred = np.array([0]*tn + [1]*fp + [0]*fn + [1]*tp)

# Metrikleri hesapla
print("Accuracy:", accuracy_score(y_true, y_pred))
print("\nClassification Report:")
print(classification_report(y_true, y_pred, digits=4))

confusion_matrix(testY, y_pred) #şansa yaşıyoruz 

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
trainX = sc.fit_transform(trainX)
testX = sc.transform(testX)


from tensorflow.keras.optimizers import Adam
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import classification_report, accuracy_score

# Modeli kur
model = Sequential([
    Dense(512, activation='relu', input_shape=(trainX.shape[1],)),
    Dropout(0.4),
    Dense(256, activation='relu'),
    Dropout(0.4),
    Dense(128, activation='relu'),
    Dropout(0.3),
    Dense(1, activation='sigmoid')  # Binary classification
])

# Derle
model.compile(
    optimizer=Adam(learning_rate=0.0005),
    loss='binary_crossentropy',
    metrics=['accuracy']
)

# Early stopping ekle
early_stop = EarlyStopping(
    monitor='val_loss',
    patience=10,
    restore_best_weights=True
)

# Eğit
history = model.fit(
    trainX, trainY,
    validation_split=0.1,
    epochs=100,
    batch_size=256,
    callbacks=[early_stop],
    verbose=1
)

# Test üzerinde tahmin
y_pred_prob = model.predict(testX)
y_pred = (y_pred_prob > 0.5).astype(int)

# Değerlendirme
print("Accuracy: {:.4f}".format(accuracy_score(testY, y_pred)))
print("\nClassification Report:\n", classification_report(testY, y_pred))

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

### 0.84 başarı

cm = confusion_matrix(testY, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Tahmin')
plt.ylabel('Gerçek')
plt.title('Confusion Matrix')
plt.show()

from sklearn.metrics import roc_curve, auc

fpr, tpr, thresholds = roc_curve(testY, y_pred_prob)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(6, 4))
plt.plot(fpr, tpr, color='darkorange', label='ROC curve (area = {:.2f})'.format(roc_auc))
plt.plot([0, 1], [0, 1], color='navy', linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC)')
plt.legend(loc="lower right")
plt.grid(True)
plt.show()

